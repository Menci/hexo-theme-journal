<%
this.cdn = {};

const cdnBaseUrls = {
  cdnjs: {
    cdnjs: "https://cdnjs.cloudflare.com/ajax/libs",
    loli: "https://cdnjs.loli.net/ajax/libs",
    baomitu: "https://lib.baomitu.com"
  },
  unpkg: {
    unpkg: "https://unpkg.com",
    jsdelivr: "https://cdn.jsdelivr.net/npm"
  }
};

const resolvePublicCdnUrlList = (type, baseUrl) =>
  type === "cdnjs" ? {
    // cdnjs
    js: {
      jquery: baseUrl + "/jquery/3.3.1/jquery.min.js",
      popper: baseUrl + "/popper.js/1.14.4/umd/popper.min.js",
      bootstrap: baseUrl + "/twitter-bootstrap/4.1.3/js/bootstrap.min.js",
      vue2: baseUrl + "/vue/2.5.17/vue.min.js",
      smoothscroll: baseUrl + "/smooth-scroll/14.2.1/smooth-scroll.min.js",
      fancybox: baseUrl + "/fancybox/3.5.7/jquery.fancybox.min.js"
    },
    css: {
      hljs: baseUrl + "/highlight.js/11.2.0/styles/",
      hljsSuffix: ".min.css",
      bootstrap: baseUrl + "/twitter-bootstrap/4.1.3/css/bootstrap.min.css",
      fancybox: baseUrl + "/fancybox/3.5.7/jquery.fancybox.min.css"
    }
  } : {
    // unpkg
    js: {
      jquery: baseUrl + "/jquery@3.3.1/dist/jquery.min.js",
      popper: baseUrl + "/popper.js@1.14.4/dist/umd/popper.min.js",
      bootstrap: baseUrl + "/bootstrap@4.1.3/dist/js/bootstrap.min.js",
      vue2: baseUrl + "/vue@2.5.17/dist/vue.min.js",
      smoothscroll: baseUrl + "/smooth-scroll@14.2.1/dist/smooth-scroll.polyfills.min.js",
      fancybox: baseUrl + "/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"
    },
    css: {
      hljs: baseUrl + "/highlight.js@11.2.0/styles/",
      hljsSuffix: ".css",
      bootstrap: baseUrl + "/bootstrap@4.1.3/dist/css/bootstrap.min.css",
      fancybox: baseUrl + "/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css"
    }
  };

const resolveCdnUrlList = expr => {
  if (typeof expr === "object") return expr;

  if (expr.includes(":")) {
    const [type, ...baseUrl] = expr.split(":");
    return resolvePublicCdnUrlList(type, baseUrl.join(":"));
  }

  const type = Object.keys(cdnBaseUrls).find(t => expr in cdnBaseUrls[t]);
  if (!type) throw new Error(`Invalid libs CDN: ${expr}`);

  return resolvePublicCdnUrlList(type, cdnBaseUrls[type][expr]);
}

this.cdn.libs = resolveCdnUrlList(theme.cdn?.libs || "baomitu");
this.cdn.fonts = theme.cdn?.fonts || "https://fonts.googleapis.com";
%>
